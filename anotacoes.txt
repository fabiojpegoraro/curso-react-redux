const [x, setX] = useState(valorInicial);

Componentes controlados não não alterados. O que pode ser alterado é o estado do componente e ele receber o valor do novo estado (conceito React).

useEffet(() => {}, []) Recebe uma função e uma lista de dependências como parâmetros. Executa efeitos colaterais em estados.

useRef() atribui uma referência de um componente, por exemplo, à uma const. Essa referência pode ser utilizada em outros pontos da aplicação.

useMemo(() => {}, []) Retorna um valor memorizado se o array sofrer alguma alteração. Esse valor memorizado pode ser resultado da execução de uma função, por exemplo.

useCallBack(() => {}, []) Vai retornar uma função (memorizada) cuja referência foi criada no momento da renderização do componente que tem esse hook. Assim a função pode ser reutilizada sem que o compoente precise ser novamente renderizado.

useContext(objetoContexto) Permite usar um contexto criado em nível mais alto e disponiblizado através do Provider.

useReducer(() => {}, state) Recebe uma função (dispatch) e um state. Ao fazer o dispatch, a função (dispatch) é executada. A função dispatch recebe um objeto que sempre recebe um type ({type: type}). O segundo parâmetro da função dispatch pode ser um payload.
store = conjunto de estados
reducers = responsáveis por interagir com os estados da store (altera-los, retorná-los)
actions = responsáveis por chamar os reducers e passar para eles o que é necessário para alterar os estados (payload de uma request, por exemplo)

##Inciar um projeto front
- Instalar dependências
- 

reducers retorna os valores dos novos estados que são criados pelo createStore passando os reducers como parâmetro.

o react-redux junta react com redux através do Provider

o método connect conecta o estado com as propriedades do componente (export default connect(mapStateToProps)(Componente))

o dispatch chama os reducers passando o objeto da action como parâmetro